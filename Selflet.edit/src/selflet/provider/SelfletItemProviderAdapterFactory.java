/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package selflet.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import selflet.util.SelfletAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SelfletItemProviderAdapterFactory extends SelfletAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SelfletItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.Abilities} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbilitiesItemProvider abilitiesItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.Abilities}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbilitiesAdapter() {
		if (abilitiesItemProvider == null) {
			abilitiesItemProvider = new AbilitiesItemProvider(this);
		}

		return abilitiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.Ability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbilityItemProvider abilityItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.Ability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbilityAdapter() {
		if (abilityItemProvider == null) {
			abilityItemProvider = new AbilityItemProvider(this);
		}

		return abilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.Actions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionsItemProvider actionsItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.Actions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionsAdapter() {
		if (actionsItemProvider == null) {
			actionsItemProvider = new ActionsItemProvider(this);
		}

		return actionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.Action} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionItemProvider actionItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.Action}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionAdapter() {
		if (actionItemProvider == null) {
			actionItemProvider = new ActionItemProvider(this);
		}

		return actionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.Active} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActiveItemProvider activeItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.Active}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActiveAdapter() {
		if (activeItemProvider == null) {
			activeItemProvider = new ActiveItemProvider(this);
		}

		return activeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.Behavior} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BehaviorItemProvider behaviorItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.Behavior}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBehaviorAdapter() {
		if (behaviorItemProvider == null) {
			behaviorItemProvider = new BehaviorItemProvider(this);
		}

		return behaviorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.Conditions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionsItemProvider conditionsItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.Conditions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionsAdapter() {
		if (conditionsItemProvider == null) {
			conditionsItemProvider = new ConditionsItemProvider(this);
		}

		return conditionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.Condition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionItemProvider conditionItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.Condition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionAdapter() {
		if (conditionItemProvider == null) {
			conditionItemProvider = new ConditionItemProvider(this);
		}

		return conditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.CPUUtilization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CPUUtilizationItemProvider cpuUtilizationItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.CPUUtilization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCPUUtilizationAdapter() {
		if (cpuUtilizationItemProvider == null) {
			cpuUtilizationItemProvider = new CPUUtilizationItemProvider(this);
		}

		return cpuUtilizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.Empty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmptyItemProvider emptyItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.Empty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmptyAdapter() {
		if (emptyItemProvider == null) {
			emptyItemProvider = new EmptyItemProvider(this);
		}

		return emptyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.GeneralKnowledge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeneralKnowledgeItemProvider generalKnowledgeItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.GeneralKnowledge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeneralKnowledgeAdapter() {
		if (generalKnowledgeItemProvider == null) {
			generalKnowledgeItemProvider = new GeneralKnowledgeItemProvider(this);
		}

		return generalKnowledgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.Input} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputItemProvider inputItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.Input}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputAdapter() {
		if (inputItemProvider == null) {
			inputItemProvider = new InputItemProvider(this);
		}

		return inputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.Method} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodItemProvider methodItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.Method}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMethodAdapter() {
		if (methodItemProvider == null) {
			methodItemProvider = new MethodItemProvider(this);
		}

		return methodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.Methods} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MethodsItemProvider methodsItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.Methods}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMethodsAdapter() {
		if (methodsItemProvider == null) {
			methodsItemProvider = new MethodsItemProvider(this);
		}

		return methodsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.OfferMode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OfferModeItemProvider offerModeItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.OfferMode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOfferModeAdapter() {
		if (offerModeItemProvider == null) {
			offerModeItemProvider = new OfferModeItemProvider(this);
		}

		return offerModeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.Output} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputItemProvider outputItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.Output}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputAdapter() {
		if (outputItemProvider == null) {
			outputItemProvider = new OutputItemProvider(this);
		}

		return outputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.Reds} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RedsItemProvider redsItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.Reds}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRedsAdapter() {
		if (redsItemProvider == null) {
			redsItemProvider = new RedsItemProvider(this);
		}

		return redsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.Rules} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RulesItemProvider rulesItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.Rules}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRulesAdapter() {
		if (rulesItemProvider == null) {
			rulesItemProvider = new RulesItemProvider(this);
		}

		return rulesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.Rule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleItemProvider ruleItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.Rule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleAdapter() {
		if (ruleItemProvider == null) {
			ruleItemProvider = new RuleItemProvider(this);
		}

		return ruleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.Selflet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelfletItemProvider selfletItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.Selflet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelfletAdapter() {
		if (selfletItemProvider == null) {
			selfletItemProvider = new SelfletItemProvider(this);
		}

		return selfletItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.SelfletProperties} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelfletPropertiesItemProvider selfletPropertiesItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.SelfletProperties}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelfletPropertiesAdapter() {
		if (selfletPropertiesItemProvider == null) {
			selfletPropertiesItemProvider = new SelfletPropertiesItemProvider(this);
		}

		return selfletPropertiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.SelfLetProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelfLetPropertyItemProvider selfLetPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.SelfLetProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelfLetPropertyAdapter() {
		if (selfLetPropertyItemProvider == null) {
			selfLetPropertyItemProvider = new SelfLetPropertyItemProvider(this);
		}

		return selfLetPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.SelfletResources} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SelfletResourcesItemProvider selfletResourcesItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.SelfletResources}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSelfletResourcesAdapter() {
		if (selfletResourcesItemProvider == null) {
			selfletResourcesItemProvider = new SelfletResourcesItemProvider(this);
		}

		return selfletResourcesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.Services} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServicesItemProvider servicesItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.Services}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServicesAdapter() {
		if (servicesItemProvider == null) {
			servicesItemProvider = new ServicesItemProvider(this);
		}

		return servicesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.Service} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceItemProvider serviceItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.Service}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceAdapter() {
		if (serviceItemProvider == null) {
			serviceItemProvider = new ServiceItemProvider(this);
		}

		return serviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.TypeKnowledge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypeKnowledgeItemProvider typeKnowledgeItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.TypeKnowledge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypeKnowledgeAdapter() {
		if (typeKnowledgeItemProvider == null) {
			typeKnowledgeItemProvider = new TypeKnowledgeItemProvider(this);
		}

		return typeKnowledgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.ElementaryBehavior} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ElementaryBehaviorItemProvider elementaryBehaviorItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.ElementaryBehavior}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createElementaryBehaviorAdapter() {
		if (elementaryBehaviorItemProvider == null) {
			elementaryBehaviorItemProvider = new ElementaryBehaviorItemProvider(this);
		}

		return elementaryBehaviorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.ComplexBehavior} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComplexBehaviorItemProvider complexBehaviorItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.ComplexBehavior}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComplexBehaviorAdapter() {
		if (complexBehaviorItemProvider == null) {
			complexBehaviorItemProvider = new ComplexBehaviorItemProvider(this);
		}

		return complexBehaviorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.State} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateItemProvider stateItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.State}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateAdapter() {
		if (stateItemProvider == null) {
			stateItemProvider = new StateItemProvider(this);
		}

		return stateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.InitialState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitialStateItemProvider initialStateItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.InitialState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitialStateAdapter() {
		if (initialStateItemProvider == null) {
			initialStateItemProvider = new InitialStateItemProvider(this);
		}

		return initialStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.FinalState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinalStateItemProvider finalStateItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.FinalState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFinalStateAdapter() {
		if (finalStateItemProvider == null) {
			finalStateItemProvider = new FinalStateItemProvider(this);
		}

		return finalStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.AbilityState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbilityStateItemProvider abilityStateItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.AbilityState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbilityStateAdapter() {
		if (abilityStateItemProvider == null) {
			abilityStateItemProvider = new AbilityStateItemProvider(this);
		}

		return abilityStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link selflet.InvocationState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InvocationStateItemProvider invocationStateItemProvider;

	/**
	 * This creates an adapter for a {@link selflet.InvocationState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInvocationStateAdapter() {
		if (invocationStateItemProvider == null) {
			invocationStateItemProvider = new InvocationStateItemProvider(this);
		}

		return invocationStateItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (abilitiesItemProvider != null) abilitiesItemProvider.dispose();
		if (abilityItemProvider != null) abilityItemProvider.dispose();
		if (actionsItemProvider != null) actionsItemProvider.dispose();
		if (actionItemProvider != null) actionItemProvider.dispose();
		if (activeItemProvider != null) activeItemProvider.dispose();
		if (behaviorItemProvider != null) behaviorItemProvider.dispose();
		if (conditionsItemProvider != null) conditionsItemProvider.dispose();
		if (conditionItemProvider != null) conditionItemProvider.dispose();
		if (cpuUtilizationItemProvider != null) cpuUtilizationItemProvider.dispose();
		if (emptyItemProvider != null) emptyItemProvider.dispose();
		if (generalKnowledgeItemProvider != null) generalKnowledgeItemProvider.dispose();
		if (inputItemProvider != null) inputItemProvider.dispose();
		if (methodItemProvider != null) methodItemProvider.dispose();
		if (methodsItemProvider != null) methodsItemProvider.dispose();
		if (offerModeItemProvider != null) offerModeItemProvider.dispose();
		if (outputItemProvider != null) outputItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
		if (redsItemProvider != null) redsItemProvider.dispose();
		if (rulesItemProvider != null) rulesItemProvider.dispose();
		if (ruleItemProvider != null) ruleItemProvider.dispose();
		if (selfletItemProvider != null) selfletItemProvider.dispose();
		if (selfletPropertiesItemProvider != null) selfletPropertiesItemProvider.dispose();
		if (selfLetPropertyItemProvider != null) selfLetPropertyItemProvider.dispose();
		if (selfletResourcesItemProvider != null) selfletResourcesItemProvider.dispose();
		if (servicesItemProvider != null) servicesItemProvider.dispose();
		if (serviceItemProvider != null) serviceItemProvider.dispose();
		if (typeKnowledgeItemProvider != null) typeKnowledgeItemProvider.dispose();
		if (elementaryBehaviorItemProvider != null) elementaryBehaviorItemProvider.dispose();
		if (complexBehaviorItemProvider != null) complexBehaviorItemProvider.dispose();
		if (stateItemProvider != null) stateItemProvider.dispose();
		if (initialStateItemProvider != null) initialStateItemProvider.dispose();
		if (finalStateItemProvider != null) finalStateItemProvider.dispose();
		if (abilityStateItemProvider != null) abilityStateItemProvider.dispose();
		if (invocationStateItemProvider != null) invocationStateItemProvider.dispose();
	}

}

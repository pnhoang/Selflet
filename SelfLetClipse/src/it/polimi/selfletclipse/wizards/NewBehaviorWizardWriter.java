package it.polimi.selfletclipse.wizards;

import it.polimi.selfletclipse.SelfLetPlugin;
import it.polimi.selfletclipse.WorkspaceManager;
import it.polimi.selfletclipse.exceptions.WriteErrorException;
import it.polimi.selfletclipse.model.Goal;
import it.polimi.selfletclipse.model.GoalParameter;
import it.polimi.selfletclipse.util.FileUtils;
import it.polimi.selfletclipse.util.WorkspaceWriter;
import it.polimi.selfletclipse.wizards.InsertGoal.InsertGoalModel;
import it.polimi.selfletclipse.wizards.SelectGoal.SelectGoalModel;
import it.polimi.selfletclipse.wizards.SelectProject.SelectProjectModel;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.ui.IPathEditorInput;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.internal.Workbench;

/**
 * @author Nicola
 */
@SuppressWarnings("restriction")
public class NewBehaviorWizardWriter {

	// Parameters
	private IProject prj;
	private Goal service;

	private IWorkbenchWindow window;
	private SelectGoalModel selectGoalModel;
	private SelectProjectModel selectProjectModel;
	private InsertGoalModel insertGoalModel;

	public NewBehaviorWizardWriter(SelectGoalModel selectGoalModel,
			SelectProjectModel selectProjectModel,
			InsertGoalModel serviceWizardModel) {

		this.selectGoalModel = selectGoalModel;
		this.selectProjectModel = selectProjectModel;
		this.insertGoalModel = serviceWizardModel;
		this.window = Workbench.getInstance().getActiveWorkbenchWindow();
	}

	public void write() {
		createBehavior();
	}

	private void createBehavior() {

		service = insertGoalModel.getGoal();

		String serviceName = service.getName();
		String projectName = selectProjectModel.getProjectName();

		prj = SelfLetPlugin.root.getProject(projectName);

		IFile file = prj.getFile("behaviors/" + serviceName + ".zargo");

		createBehaviorFile(serviceName, file, selectGoalModel.isComplex());

		if (selectGoalModel.isComplex()) {
			createComplexAction(serviceName);
		} else {
			createElementaryAction(serviceName);
		}

		WorkspaceManager.refreshResourcesTree();

		if (!selectGoalModel.isNewGoal()) {
			try {
				WorkspaceWriter.writeGoalFile(service, projectName);
			} catch (WriteErrorException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

	}

	private void createComplexAction(String behaviorName) {

		IFile file = prj.getFile("actions/need" + behaviorName + ".java");

		try {
			if (!file.exists())
				file.create(null, false, null);
		} catch (CoreException e) {
			e.printStackTrace();
		}

		/* Prepare the string to write */
		String s = new String();
		s = s.concat("{\n");
		s = s
				.concat("\t//TODO Automatically generated by SelfLetClipse plugin\n");
		s = s.concat("\t//Behavior action file\n");
		s = s.concat("\tIActionExecutor ae = $9;\n");
		s = s.concat("\tIInternalKnowledge kb = $6;\n\n");
		s = s.concat("\n");

		String name = service.getOutputName();
		String type = service.getOutputType();

		s = s.concat("\t" + type + " " + name + " = null;\n");
		s = s.concat("\t" + name + " = ae.needGoal(\"" + behaviorName
				+ "\");\n");
		s = s.concat("\treturn " + name + ";\n");
		s = s.concat("}\n");

		FileUtils.writeFile(file, s);

	}

	private void createElementaryAction(String abilityName) {
		IFile file = prj.getFile("actions/" + abilityName + ".java");
		try {
			if (!file.exists())
				file.create(null, false, null);
		} catch (CoreException e) {
			e.printStackTrace();
		}

		int numParameters = service.getParameters().size();

		// Create the content for the action
		String s = new String();
		s = s.concat("{\n");
		s = s
				.concat("\t//TODO Automatically generated by SelfLetClipse plugin \n");
		s = s.concat("\t//Ability action file\n");
		s = s.concat("\tIActionExecutor ae = $9;\n");
		s = s.concat("\tIInternalKnowledge kb = $6;\n\n");
		s = s.concat("\n");

		s = appendVariablesDeclaration(s);
		s = appendVariablesFromKnowledge(s);

		s = s.concat("\tObject [] abilityParams = new Object[" + numParameters
				+ "];\n");
		s = s.concat("\tabilityParams[0] = \"" + abilityName + "\";\n ");
		s = appendParamValues(s);
		s = s.concat("\tList params = new ArrayList();\n");
		s = s.concat("\tparams.add(abilityParams);\n");

		String name = service.getOutputName();
		String type = service.getOutputType();

		// if (outputParam != null) {

		s = s.concat("\t" + name + " = (" + type + ") ae.executeAbility(\"");
		s = s.concat(abilityName + ".jar\", " + "params);\n");

		// }

		s = s.concat("\treturn " + name + ";\n");
		s = s.concat("}\n");

		FileUtils.writeFile(file, s);

	}

	private String appendParamValues(String content) {

		ArrayList<GoalParameter> services = service.getParameters();

		int i = 0;
		for (GoalParameter param : services) {

			content = content.concat("\tabilityParams[" + i + "] =  "
					+ param.getName() + ";\n");
			i++;
		}
		return content;
	}

	private String appendVariablesFromKnowledge(String s) {

		ArrayList<GoalParameter> services = service.getParameters();
		for (GoalParameter param : services) {
			s = s.concat("\ttry {\n");
			s = s.concat("\t\t" + param.getName() + " = (" + param.getType()
					+ ") kb.getProperty(\"" + param.getName() + "\");\n");
			s = s
					.concat("\t} catch (it.polimi.elet.selflet.exceptions.NotFoundException e1) {\n");
			s = s.concat("\toutput = KnowledgeBase.ERROR;\n");
			s = s.concat("\t}\n\n");

		}
		return s;
	}

	/*
	 * Declare used variables
	 */
	private String appendVariablesDeclaration(String s) {

		ArrayList<GoalParameter> services = service.getParameters();
		// Input
		for (GoalParameter param : services) {
			s = s.concat("\t" + param.getType() + " " + param.getName()
					+ " = null;\n");
		}
		// Output
		s = s.concat("\t" + service.getOutputType() + " " + service.getOutputName()
				+ " = null;\n");

		return s;

	}

	private void createBehaviorFile(String name, IFile file, boolean complex) {

		//TODO: HOANG
		//CREATE THE BEHAVIOR FILE BASED ON GMF 

		
		
		
		/*
		  		// try {
		 
		// ArgoProject.saveProject();
		// } catch (SaveException e1) {
		// e1.printStackTrace();
		// } catch (InterruptedException e1) {
		// e1.printStackTrace();
		// } catch (IOException e1) {
		// e1.printStackTrace();
		// }

		// ??
		String resourceFile = complex ? "complex.zargo" : "elementary.zargo";
		String path = new String("/it/polimi/selfletclipse/resources/"
				+ resourceFile);

		InputStream g = getClass().getResourceAsStream(path);

		FileUtils.createFileFromInputStream(file, g);
		InitUI.initialize();

		// Open the created file in a new editor page 
		IPathEditorInput input = new ArgoEditorInput(file);
		IWorkbenchPage activePage = window.getActivePage();

		if (Register.getInstance().isRegistered(Register.EDITOR)) {
			// If the editor is already open
			DiagramEditor ed = (DiagramEditor) Register.getInstance()
					.getRegistered(Register.EDITOR);
			ed.setPartName(input.getName());
			ed.setInput(input);
		} else {
			try {
				// If the editor panel is not open, then open a new one with the
				// specified class
				activePage.openEditor(input,
						"org.argouml.argoeclipse.internal.ui"
								+ ".editor.DiagramEditor");
			} catch (PartInitException e) {
				e.printStackTrace();
			}
		}

		if (!complex && name != null)
			changeAbilityName(name);*/

	}

	@SuppressWarnings("unchecked")
	private void changeAbilityName(String name) {

		
		//TODO: HOANG
		//CREATE THE BEHAVIOR FILE BASED ON GMF
		
		/*
		Project p = ProjectManager.getManager().getCurrentProject();
		ModelManagementHelper helper = Model.getModelManagementHelper();

		Collection cont = helper.getAllModelElementsOfKind(p
				.getCurrentNamespace(),
				"org.omg.uml.behavioralelements.statemachines.State");
		Iterator itr = cont.iterator();
		while (itr.hasNext()) {
			Object object = (Object) itr.next();
			if (Model.getFacade().isAState(object)) {
				if (object instanceof State) {

					State ss = (State) object;
					if (ss.getName().contains("Template")) {

						Action a = ss.getDoActivity();
						ActionExpression script = a.getScript();

						script.setBody(name + ".java");
						script.setLanguage("javassist");

						ss.setName(name);

						Model.getStateMachinesHelper().setDoActivity(ss, a);
					}
				}
			}
		}*/

	}

}
